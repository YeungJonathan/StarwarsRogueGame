package edu.monash.fit2099.simulator.matter;

import edu.monash.fit2099.simulator.userInterface.MessageRenderer;

/**
 * Base class for simulator commands.
 * 
 * This class needs, at minimum, an <code>Actor</code>, a <code>World</code>, and a <code>MessageRenderer</code>.  Given the <code>Actor</code>
 * performing the command, the <code>World</code> can determine its <code>Location</code> and any other <code>Entities</code> that exist
 * there.  The <code>MessageRenderer</code> allows for the output of any pertinent results.
 * <p>
 * Generated by UML Lab
 * 
 * @author 	ram
 * @date 	17 February 2013
 * @see		{@link edu.monash.fit2099.simulator.matter.Actor}
 * @see		{@link edu.monash.fit2099.simulator.space.World}
 * @see		{@link edu.monash.fit2099.simulator.userInterface.MessageRenderer}
 * @see		{@link edu.monash.fit2099.simulator.space.Location}
 * @see		{@link edu.monash.fit2099.simulator.matter.Entity}
 * 
 */
/*
 * Changelog
 * 2013-02-28: added a MessageRenderer so that Actions can communicate to users. (ram)
 * 	Made an abstract class, since messageRenderer won't be public static final. (ram)
 * 	Added getDuration method, since it seems that duration is a property of the action. (ram)
 * 2013-03-01: Made generic to avoid downcasts in client code (ram)
 * 2013-03-04: Took the genericity out again, it's spreading like kudzu (ram)
 * 2013-03-09: Added accessor for String description (ram)
 * 	Made the default constructor private to ensure that the message renderer is set (ram)
 * 2013-03-12: Added wildcard template to Actor parameter in execute() to pacify the IDE (ram)
 * 	Documented all the methods to pacify my own sense of the tidy (ram)
 * 2013-04-08: Added ActionInterface so that client code can have Affordances that implement it (ram)
 * 2017-01-24: Added delay and cooldown attributes to schedule actions with durations (Asel)
 * 2017-02-08: Added a new priority attribute to allow events within a tick to be sorted based on the priority of the Action (Asel)
 */


public abstract class Action implements ActionInterface {
	
	/**
	 * MessageRenderer used by this <code>Action</code> to display messages
	 */
	protected MessageRenderer messageRenderer;
	
	/**
	 * The priority of the <code>Action</code>. Smaller the size of the integer, lower the priority.
	 * <p>
	 * <code>Actions</code> with higher priority will occur before any other <code>Actions</code> of lower priority within the same tick. 
	 * Equal priority <code>Actions</code> will occur in an arbitrary order within the same tick.
	 * <p>
	 * All <code>Actions</code> will have the lowest priority of 0 by default.
	 */
	protected int priority = 0;
	
	/**The amount of wait time before executing an event.
	 * <p>
	 * An <code>Actor</code> cannot act during the <code>delay</code> period. The total wait time for an <code>Actor</code> is 
	 * <code>delay</code> + <code>cooldown</code>
	 * 
	 * @see {@link #cooldown} 
	 */
	private int delay;
	
	/**The amount of time allowed to pass after the event has been executed.
	 * <p>
	 * An <code>Actor</code> cannot act during the <code>cooldown</code> period. The total wait time for an <code>Actor</code> is 
	 * <code>delay</code> + <code>cooldown</code>
	 * 
	 * @see {@link #delay} 
	 */
	private int cooldown;
	
	/*
	 * Public getters and setters for delay and cooldown allows Actions that that affects other Actions to be implemented.
	 * For example a slow down action that slows down an opponents actions by increasing the delays and cooldowns (Asel)
	 */
	
	/**
	 * Returns the <code>delay</code> of this <code>Action</code>
	 * 
	 * @return 	the <code>delay</code> of this <code>Action</code>
	 * @see		#delay
	 */
	public int getDelay() {
		return delay;
	}

	/**
	 * Sets the <code>delay</code> of this <code>Action</code> to the new <code>delay</code>
	 * 
	 * @param 	delay the new delay of this <code>Action</code>
	 * @pre 	the new <code>delay</code> should be greater than or equal to zero
	 * @see 	#delay
	 */
	public void setDelay(int delay) {
		
		//Precondition 1 : To ensure a positive or zero delay
		assert (delay >= 0): "delay should be greater than equal to zero";
		this.delay = delay;
	}

	/**
	 * Returns the <code>cooldown</code> of this <code>Action</code>
	 * 
	 * @return 	The <code>cooldown</code> of this <code>Action</code>
	 * @see		#cooldown
	 */
	public int getCooldown() {
		return cooldown;
	}

	/**
	 * Sets the <code>cooldown</code> of this <code>Action</code> to the new <code>cooldown</code>
	 * 
	 * @param 	cooldown the new cooldown of this <code>Action</code>
	 * @pre 	the new <code>cooldown</code> should be greater than or equal to zero
	 * @see 	#cooldown
	 */
	public void setCooldown(int cooldown) {
		
		//Precondition 1 : To ensure a positive or zero cooldown
		assert (cooldown >= 0): "cooldown should be greater than equal to zero";
		this.cooldown = cooldown;
	}

	@Override
	public int getPriority() {
		return priority;
	}
	
	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#getDuration()
	 */
	@Override
	public abstract int getDuration();
	
	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#execute(edu.monash.fit2024.simulator.Actor)
	 */
	@Override
	public abstract void execute(Actor<?> actor);

	/* (non-Javadoc)
	 * @see edu.monash.fit2024.simulator.ActionInterface#getDescription()
	 */
	@Override
	public abstract String getDescription();
	
	
	
	/* (non-Javadoc)
	 * <p>The default constructor is private to prevent instantiation of an Action without a MessageRenderer.</p>
	 * 
	 */
	@SuppressWarnings("unused")
	private Action() {};
	
	/**
	 * <p>Call this from client code using a super() call.</p>
	 * 
	 * @param m <code>MessageRenderer</code> used for displaying messages
	 */
	public Action(MessageRenderer m) {
		messageRenderer = m;
	}
}